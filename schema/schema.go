// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"time"
)

// Адрес is Служит для представления адреса контрагента или любого другого участника бизнес-процесса
type Адрес struct {
	Представление *Представление `xml:"Представление"`
}

// Представление is Строковое представление адреса. Например: Москва, ул. Селезневская, д.21
type Представление *Представление

// CmlНаименованиеТип ...
type CmlНаименованиеТип string

// Комментарий is Имя единицы измерения товара по ОКЕИ.
type Комментарий string

// АдресноеПоле ...
type АдресноеПоле struct {
	Тип      string `xml:"Тип"`
	Значение string `xml:"Значение"`
}

// Банк ...
type Банк struct {
	СчетКорреспондентский string                `xml:"СчетКорреспондентский"`
	Наименование          string                `xml:"Наименование"`
	Адрес                 *Адрес                `xml:"Адрес"`
	Контакты              *КонтактнаяИнформация `xml:"Контакты"`
	БИК                   string                `xml:"БИК"`
	SWIFT                 string                `xml:"SWIFT"`
}

// Свойства ...
type Свойства struct {
	Свойство []*Свойство `xml:"Свойство"`
}

// Группы ...
type Группы struct {
	Группа []*Группа `xml:"Группа"`
}

// Группа ...
type Группа struct {
	Ид           string    `xml:"Ид"`
	Наименование string    `xml:"Наименование"`
	Описание     string    `xml:"Описание"`
	Свойства     *Свойства `xml:"Свойства"`
	Группы       *Группы   `xml:"Группы"`
}

// Контрагент ...
type Контрагент struct {
	Роль          string         `xml:"Роль"`
	РасчетныйСчет *РасчетныйСчет `xml:"РасчетныйСчет"`
	Склад         *Склад         `xml:"Склад"`
	*Контрагент
}

// Контрагенты ...
type Контрагенты struct {
	Контрагент []*Контрагент `xml:"Контрагент"`
}

// Налог ...
type Налог struct {
	Сумма  float64 `xml:"Сумма"`
	Ставка string  `xml:"Ставка"`
	*Налог
}

// Налоги ...
type Налоги struct {
	Налог []*Налог `xml:"Налог"`
}

// Скидки ...
type Скидки struct {
	Скидка []*Скидка `xml:"Скидка"`
}

// ДопРасходы ...
type ДопРасходы struct {
	ДопРасход []*ДопРасход `xml:"ДопРасход"`
}

// Склады ...
type Склады struct {
	Склад []*Склад `xml:"Склад"`
}

// Скидка ...
type Скидка struct {
	*Скидка
}

// ДополнительныеЗначенияРеквизитов ...
type ДополнительныеЗначенияРеквизитов struct {
	ЗначениеРеквизита []*ЗначениеРеквизита `xml:"ЗначениеРеквизита"`
}

// Склад ...
type Склад struct {
	Количество float64 `xml:"Количество"`
	*Склад
}

// Товар ...
type Товар struct {
	CmlЕдиницаИзмерения              *ЕдиницаИзмерения
	ИдКаталога                       string                            `xml:"ИдКаталога"`
	ИдКлассификатора                 string                            `xml:"ИдКлассификатора"`
	ЦенаЗаЕдиницу                    float64                           `xml:"ЦенаЗаЕдиницу"`
	Количество                       float64                           `xml:"Количество"`
	Сумма                            float64                           `xml:"Сумма"`
	СтранаПроисхождения              string                            `xml:"СтранаПроисхождения"`
	ГТД                              string                            `xml:"ГТД"`
	Налоги                           *Налоги                           `xml:"Налоги"`
	Скидки                           *Скидки                           `xml:"Скидки"`
	ДопРасходы                       *ДопРасходы                       `xml:"ДопРасходы"`
	ДополнительныеЗначенияРеквизитов *ДополнительныеЗначенияРеквизитов `xml:"ДополнительныеЗначенияРеквизитов"`
	Склады                           *Склады                           `xml:"Склады"`
	*Товар
}

// Товары ...
type Товары struct {
	Товар []*Товар `xml:"Товар"`
}

// ЗначенияРеквизитов ...
type ЗначенияРеквизитов struct {
	ЗначениеРеквизита []*ЗначениеРеквизита `xml:"ЗначениеРеквизита"`
}

// Подписанты ...
type Подписанты struct {
	Подписант []*Подписант `xml:"Подписант"`
}

// ПодчиненныеДокументы ...
type ПодчиненныеДокументы struct {
	ПодчиненныйДокумент []*ПодчиненныйДокумент `xml:"ПодчиненныйДокумент"`
}

// Документ ...
type Документ struct {
	Ид                   string                `xml:"Ид"`
	Номер                string                `xml:"Номер"`
	Дата                 string                `xml:"Дата"`
	ХозОперация          string                `xml:"ХозОперация"`
	Роль                 string                `xml:"Роль"`
	Валюта               string                `xml:"Валюта"`
	Курс                 string                `xml:"Курс"`
	Сумма                float64               `xml:"Сумма"`
	Контрагенты          *Контрагенты          `xml:"Контрагенты"`
	Время                time.Time             `xml:"Время"`
	СрокПлатежа          string                `xml:"СрокПлатежа"`
	Комментарий          string                `xml:"Комментарий"`
	Налоги               *Налоги               `xml:"Налоги"`
	Скидки               *Скидки               `xml:"Скидки"`
	ДопРасходы           *ДопРасходы           `xml:"ДопРасходы"`
	Склады               *Склады               `xml:"Склады"`
	Товары               *Товары               `xml:"Товары"`
	ЗначенияРеквизитов   *ЗначенияРеквизитов   `xml:"ЗначенияРеквизитов"`
	Подписанты           *Подписанты           `xml:"Подписанты"`
	ПодчиненныеДокументы *ПодчиненныеДокументы `xml:"ПодчиненныеДокументы"`
}

// ДопРасход ...
type ДопРасход struct {
	Наименование string  `xml:"Наименование"`
	Сумма        float64 `xml:"Сумма"`
	Процент      string  `xml:"Процент"`
	УчтеноВСумме bool    `xml:"УчтеноВСумме"`
	Комментарий  string  `xml:"Комментарий"`
}

// ЗначениеРеквизита ...
type ЗначениеРеквизита struct {
	Наименование string   `xml:"Наименование"`
	Значение     []string `xml:"Значение"`
}

// ЗначенияСвойства ...
type ЗначенияСвойства struct {
	Ид           string   `xml:"Ид"`
	Наименование string   `xml:"Наименование"`
	Значение     []string `xml:"Значение"`
}

// Цены ...
type Цены struct {
	Цена []*Цена `xml:"Цена"`
}

// Предложение ...
type Предложение struct {
	CmlИдентификаторТовара *ИдентификаторТовара
	ИдХарактеристики       string              `xml:"ИдХарактеристики"`
	КодЕдиницыИзмерения    string              `xml:"КодЕдиницыИзмерения"`
	Склады                 []*ОстаткиПоСкладам `xml:"Склады"`
	Цены                   *Цены               `xml:"Цены"`
	Количество             float64             `xml:"Количество"`
}

// Предложения ...
type Предложения struct {
	Предложение []*Предложение `xml:"Предложение"`
}

// ИзмененияПакетаПредложений ...
type ИзмененияПакетаПредложений struct {
	СодержитТолькоИзмененияAttr bool         `xml:"СодержитТолькоИзменения,attr,omitempty"`
	Ид                          string       `xml:"Ид"`
	ИдКаталога                  string       `xml:"ИдКаталога"`
	Предложения                 *Предложения `xml:"Предложения"`
}

// Каталог ...
type Каталог struct {
	СодержитТолькоИзмененияAttr bool        `xml:"СодержитТолькоИзменения,attr,omitempty"`
	Ид                          string      `xml:"Ид"`
	ИдКлассификатора            string      `xml:"ИдКлассификатора"`
	Наименование                string      `xml:"Наименование"`
	Владелец                    *Контрагент `xml:"Владелец"`
	Товары                      *Товары     `xml:"Товары"`
	Описание                    string      `xml:"Описание"`
	Подписанты                  *Подписанты `xml:"Подписанты"`
}

// ТипыЦен ...
type ТипыЦен struct {
	ТипЦены []*ТипЦены `xml:"ТипЦены"`
}

// Классификатор ...
type Классификатор struct {
	Ид           string      `xml:"Ид"`
	Наименование string      `xml:"Наименование"`
	Владелец     *Контрагент `xml:"Владелец"`
	Описание     string      `xml:"Описание"`
	Группы       *Группы     `xml:"Группы"`
	Свойства     *Свойства   `xml:"Свойства"`
	ТипыЦен      *ТипыЦен    `xml:"ТипыЦен"`
	Подписанты   *Подписанты `xml:"Подписанты"`
}

// КоммерческаяИнформация ...
type КоммерческаяИнформация struct {
	ВерсияСхемыAttr      interface{}       `xml:"ВерсияСхемы,attr"`
	ДатаФормированияAttr string            `xml:"ДатаФормирования,attr"`
	CmlКлассификатор     *Классификатор    `xml:"cml:Классификатор"`
	CmlКаталог           *Каталог          `xml:"cml:Каталог"`
	CmlПакетПредложений  *ПакетПредложений `xml:"cml:ПакетПредложений"`
	CmlДокумент          []*Документ       `xml:"cml:Документ"`
	Комментарий          string            `xml:"Комментарий"`
}

// Контакт ...
type Контакт struct {
	Тип         string `xml:"Тип"`
	Значение    string `xml:"Значение"`
	Комментарий string `xml:"Комментарий"`
}

// КонтактнаяИнформация ...
type КонтактнаяИнформация struct {
	Контакт []*Контакт `xml:"Контакт"`
}

// Представители ...
type Представители struct {
	Представитель []*Представитель `xml:"Представитель"`
}

// ЗначенияСвойств ...
type ЗначенияСвойств struct {
	ЗначенияСвойства []*ЗначенияСвойства `xml:"ЗначенияСвойства"`
}

// ПакетПредложений ...
type ПакетПредложений struct {
	СодержитТолькоИзмененияAttr bool             `xml:"СодержитТолькоИзменения,attr,omitempty"`
	Ид                          string           `xml:"Ид"`
	Наименование                string           `xml:"Наименование"`
	ИдКаталога                  string           `xml:"ИдКаталога"`
	ИдКлассификатора            string           `xml:"ИдКлассификатора"`
	ДействительноС              string           `xml:"ДействительноС"`
	ДействительноДо             string           `xml:"ДействительноДо"`
	Описание                    string           `xml:"Описание"`
	Владелец                    *Контрагент      `xml:"Владелец"`
	ТипыЦен                     *ТипыЦен         `xml:"ТипыЦен"`
	Склады                      *Склады          `xml:"Склады"`
	ЗначенияСвойств             *ЗначенияСвойств `xml:"ЗначенияСвойств"`
	Предложения                 *Предложения     `xml:"Предложения"`
	Подписанты                  *Подписанты      `xml:"Подписанты"`
}

// УдостоверениеЛичности ...
type УдостоверениеЛичности struct {
	CmlУдостоверениеЛичности *УдостоверениеЛичности
}

// МестоРаботы ...
type МестоРаботы struct {
	CmlРеквизитыЮрЛица *РеквизитыЮрЛица
}

// Подписант ...
type Подписант struct {
	Фамилия               string                 `xml:"Фамилия"`
	Имя                   string                 `xml:"Имя"`
	Отчество              string                 `xml:"Отчество"`
	Обращение             string                 `xml:"Обращение"`
	УдостоверениеЛичности *УдостоверениеЛичности `xml:"УдостоверениеЛичности"`
	АдресРегистрации      *Адрес                 `xml:"АдресРегистрации"`
	МестоРаботы           *МестоРаботы           `xml:"МестоРаботы"`
	Должность             string                 `xml:"Должность"`
	Комментарий           string                 `xml:"Комментарий"`
}

// ПодчиненныйДокумент ...
type ПодчиненныйДокумент struct {
	Ид                 string              `xml:"Ид"`
	Номер              string              `xml:"Номер"`
	Дата               string              `xml:"Дата"`
	ХозОперация        string              `xml:"ХозОперация"`
	Роль               string              `xml:"Роль"`
	Валюта             string              `xml:"Валюта"`
	Курс               string              `xml:"Курс"`
	Сумма              float64             `xml:"Сумма"`
	Контрагенты        *Контрагенты        `xml:"Контрагенты"`
	Время              time.Time           `xml:"Время"`
	СрокПлатежа        string              `xml:"СрокПлатежа"`
	Комментарий        string              `xml:"Комментарий"`
	Налоги             *Налоги             `xml:"Налоги"`
	Скидки             *Скидки             `xml:"Скидки"`
	ДопРасходы         *ДопРасходы         `xml:"ДопРасходы"`
	Склады             *Склады             `xml:"Склады"`
	Товары             *Товары             `xml:"Товары"`
	ЗначенияРеквизитов *ЗначенияРеквизитов `xml:"ЗначенияРеквизитов"`
	Подписанты         *Подписанты         `xml:"Подписанты"`
}

// Представитель ...
type Представитель struct {
	CmlРеквизитыЮрЛица  *РеквизитыЮрЛица
	CmlРеквизитыФизЛица *РеквизитыФизЛица
	Ид                  string                `xml:"Ид"`
	Наименование        string                `xml:"Наименование"`
	Комментарий         string                `xml:"Комментарий"`
	Адрес               *Адрес                `xml:"Адрес"`
	Контакты            *КонтактнаяИнформация `xml:"Контакты"`
	Отношение           string                `xml:"Отношение"`
}

// РасчетныйСчет ...
type РасчетныйСчет struct {
	НомерСчета        string `xml:"НомерСчета"`
	Банк              *Банк  `xml:"Банк"`
	БанкКорреспондент *Банк  `xml:"БанкКорреспондент"`
	Комментарий       string `xml:"Комментарий"`
}

// Руководитель ...
type Руководитель struct {
	Фамилия               string                 `xml:"Фамилия"`
	Имя                   string                 `xml:"Имя"`
	Отчество              string                 `xml:"Отчество"`
	УдостоверениеЛичности *УдостоверениеЛичности `xml:"УдостоверениеЛичности"`
	АресРегистрации       *Адрес                 `xml:"АресРегистрации"`
	Должность             string                 `xml:"Должность"`
	Контакты              *КонтактнаяИнформация  `xml:"Контакты"`
}

// ХарактеристикаТовара ...
type ХарактеристикаТовара struct {
	Ид           string `xml:"Ид"`
	Наименование string `xml:"Наименование"`
	Значение     string `xml:"Значение"`
}

// ХарактеристикиТовара ...
type ХарактеристикиТовара struct {
	ХарактеристикаТовара []*ХарактеристикаТовара `xml:"ХарактеристикаТовара"`
}

// Справочник ...
type Справочник struct {
	ИдЗначения string `xml:"ИдЗначения"`
	Значение   string `xml:"Значение"`
}

// ВариантыЗначений ...
type ВариантыЗначений struct {
	Значение   []string      `xml:"Значение"`
	Справочник []*Справочник `xml:"Справочник"`
}

// Свойство ...
type Свойство struct {
	CmlИспользованиеСвойства *ИспользованиеСвойства
	Ид                       string            `xml:"Ид"`
	Наименование             string            `xml:"Наименование"`
	Описание                 string            `xml:"Описание"`
	Обязательное             string            `xml:"Обязательное"`
	Множественное            bool              `xml:"Множественное"`
	ТипЗначений              string            `xml:"ТипЗначений"`
	ВариантыЗначений         *ВариантыЗначений `xml:"ВариантыЗначений"`
}

// ОстаткиПоСкладам ...
type ОстаткиПоСкладам struct {
	ИдСкладаAttr           string  `xml:"ИдСклада,attr"`
	КоличествоНаСкладеAttr float64 `xml:"КоличествоНаСкладе,attr,omitempty"`
}

// ТипЦены ...
type ТипЦены struct {
	Ид           string   `xml:"Ид"`
	Наименование string   `xml:"Наименование"`
	Валюта       string   `xml:"Валюта"`
	Описание     string   `xml:"Описание"`
	Налог        []*Налог `xml:"Налог"`
}

// Пересчет ...
type Пересчет struct {
	CmlЕдиницаИзмерения *ЕдиницаИзмерения
}

// БазоваяЕдиница ...
type БазоваяЕдиница struct {
	КодAttr                     string      `xml:"Код,attr,omitempty"`
	НаименованиеПолноеAttr      string      `xml:"НаименованиеПолное,attr,omitempty"`
	МеждународноеСокращениеAttr string      `xml:"МеждународноеСокращение,attr,omitempty"`
	НаименованиеКраткоеAttr     string      `xml:"НаименованиеКраткое,attr,omitempty"`
	Пересчет                    []*Пересчет `xml:"Пересчет"`
}

// СтавкаНалога ...
type СтавкаНалога struct {
	Наименование string `xml:"Наименование"`
	Ставка       string `xml:"Ставка"`
}

// СтавкиНалогов ...
type СтавкиНалогов struct {
	СтавкаНалога []*СтавкаНалога `xml:"СтавкаНалога"`
}

// Акциз ...
type Акциз struct {
	Наименование   string  `xml:"Наименование"`
	СуммаЗаЕдиницу float64 `xml:"СуммаЗаЕдиницу"`
	Валюта         string  `xml:"Валюта"`
}

// Акцизы ...
type Акцизы struct {
	Акциз []*Акциз `xml:"Акциз"`
}

// Комплектующее ...
type Комплектующее struct {
	ИдКаталога       string  `xml:"ИдКаталога"`
	ИдКлассификатора string  `xml:"ИдКлассификатора"`
	Количество       float64 `xml:"Количество"`
	*Товар
}

// Комплектующие ...
type Комплектующие struct {
	Комплектующее []*Комплектующее `xml:"Комплектующее"`
}

// Аналог ...
type Аналог struct {
	ИдКаталога       string `xml:"ИдКаталога"`
	ИдКлассификатора string `xml:"ИдКлассификатора"`
	*Товар
}

// Аналоги ...
type Аналоги struct {
	Аналог []*Аналог `xml:"Аналог"`
}

// Цена ...
type Цена struct {
	CmlЕдиницаИзмерения *ЕдиницаИзмерения
	Представление       string  `xml:"Представление"`
	ИдТипаЦены          string  `xml:"ИдТипаЦены"`
	ЦенаЗаЕдиницу       float64 `xml:"ЦенаЗаЕдиницу"`
	Валюта              string  `xml:"Валюта"`
	МинКоличество       float64 `xml:"МинКоличество"`
	ИдКаталога          string  `xml:"ИдКаталога"`
}

// ДополнительныеДанные ...
type ДополнительныеДанные struct {
	ЗначениеРеквизита []*ЗначениеРеквизита `xml:"ЗначениеРеквизита"`
}

// РасчетныеСчета ...
type РасчетныеСчета struct {
	РасчетныйСчет []*РасчетныйСчет `xml:"РасчетныйСчет"`
}

// Организация ...
type Организация struct {
	CmlРеквизитыЮрЛица *РеквизитыЮрЛица
}

// СчетНомерТип is Номер счета, сформированный в соответствии со "Схемой обозначения лицевых счетов и их нумерации (по основным счетам)" приложения 1 Правил ведения бухгалтерского учета в Банке России от 18.09.97 №66 или Правил ведения бухгалтерского учета в кредитных организациях, расположенных на территории РФ, от 05.12.2002 №205 с учетом изменений и дополнений.
type СчетНомерТип string

// КомментарийТип is Текст комментария (пояснения, описания)
type КомментарийТип string

// БИКТип is Банковский идентификационный код (БИК). В соответствии со "Справочником БИК РФ"
type БИКТип string

// НаименованиеТип is Наименование контрагента, описание товара (изделия) и дополнительная информация при ее наличии
type НаименованиеТип string

// ДатаТип is Представление даты
type ДатаТип string

// ВремяТип is Представление времени
type ВремяТип time.Time

// КонтактТип is Тип связи с контрагентом
type КонтактТип string

// АдресТип is Почтовый адрес
type АдресТип string

// СтатусТип is Определяет статус описанного товара
type СтатусТип string

// ИННТип is Индивидуальный номер налогоплательщика (ИНН). Область значений [ИНН]. 10 цифр - для юридических лиц, 12 цифр - для физических лиц.
type ИННТип string

// КППТип is Код причины постановки на учет (КПП)
type КППТип string

// ИдентфикаторТип is Идентификатор с ограничение в 20 символов
type ИдентфикаторТип string

// СуммаТип is Числовое представление суммы. Разделитель целой и дробной части: «.».
type СуммаТип float64

// ИдентификаторГлобальныйТип is Уникальный идентификатор (рекомендуется использовать GUID - Globally Unique Identifier)
type ИдентификаторГлобальныйТип string

// ПереключательТип is Переключатель значений (да / нет, 0 / 1, правда / ложь).
type ПереключательТип bool

// ОбязательностьСвойствТип is Определяет обязательность указания значений свойства для товаров в каталоге, пакете предложений, докуменах
type ОбязательностьСвойствТип string

// ТипЗначенийТип is Определяет принадлежность описываемых свойств
type ТипЗначенийТип string

// ВалютаТип is Код валюты по международному классификатору валют (ISO 4217). Если не указана, то используется валюта установленная для данного типа цен
type ВалютаТип string

// ЕГРПОТип is Единый Государственный регистр предприятий и организаций
type ЕГРПОТип string

// КоличествоТип is Числовая информация
type КоличествоТип float64

// КоэффициентТип is Коэффициент (например коэффициент пересчета в базовую единицу измерения), процент
type КоэффициентТип string

// НомерТип is Номер (например документа)
type НомерТип string

// ОбращениеТип is Описывает возможные обращения (Господин, Госпожа и др.)
type ОбращениеТип string

// СВИФТТип is Код SWIFT
type СВИФТТип string

// ОКВЭДТип is Код в общероссийском классификаторе видов экономической деятельности (ОК 029-2001).
type ОКВЭДТип string

// ОКОПФТип is Код в общероссийском классификаторе организационно-правовой формы
type ОКОПФТип string

// ОКПОТип is Код в общероссийском классификаторе предприятий и организаций
type ОКПОТип string

// ОКФСТип is Код в общероссийском классификаторе форм собственности
type ОКФСТип string

// ПолТип is Пол (мужской, женский).
type ПолТип string

// РольТип is Определяет роль участника обмена
type РольТип string

// СтрокаТип is Определяет строковое значение передаваемой информации в 255 символов
type СтрокаТип string

// ШтрихкодТип is Штрихкод (GTIN) товара (код EAN/UPC).
type ШтрихкодТип string

// АртикулТип is Артикул
type АртикулТип string

// ЕдиницаТип is Единица измерения по ОКЕИ
type ЕдиницаТип string

// ХозОперацияТип is Определяет хозяйственную или торговую операцию
type ХозОперацияТип string

// ИмяФайлаТип is Имя передаваемого файла (картинки)
type ИмяФайлаТип string

// ОКДПТип is Код в общероссийском классификаторе видов экономической деятельности, продукции и услуг (ОК 004-93).
type ОКДПТип string

// ДатаВремяТип is Представление даты и времени
type ДатаВремяТип string

// ЗначениеТип is Строка длиной до 1000 символов для определения значения сущности в документе
type ЗначениеТип string

// Идентификатор80 is Идентификатор группы, свойства в классификаторе товаров, типа цены в классификаторе, документа в рамках файла обмена
type Идентификатор80 string

// Строка3 is Определяетдлину строки
type Строка3 string

// ВидДеятельностиТип is Основной вид деятельности по учредительным документам
type ВидДеятельностиТип string

type ЕдиницаИзмерения string

type ИдентификаторТовара string

type РеквизитыЮрЛица string

type РеквизитыФизЛица string

type ИспользованиеСвойства string